/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   rush01.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: zsmith <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/07/24 07:25:12 by zsmith            #+#    #+#             */
/*   Updated: 2016/07/24 07:25:15 by zsmith           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int		ch_row(int **puzzle, int y, int num);
int		ch_col(int **puzzle, int x, int num);
int		ch_sqr(int **puzzle, int x, int y, int num);
int		main(int argc, char **argv);

void	test_print(int **ar)
{
	int x;
	int y;

	y = -1;
	while (++y < 9)
	{
		x = -1;
		while (++x < 9)
			printf("%d ", ar[y][x]);
		printf("\n");
	}
		printf("\n");
}

int		**count_duku(int x, int y, int **puzzle)
{
	int num;
	int r;
	int sqr;
	int c;
	int na;

	printf("beginning x:%d | y%d\n", x, y);
	test_print(puzzle);

	if (x == 9 && y == 9 && puzzle[y][x] != 0)
		return (puzzle);
	while (puzzle[y][x] != 0)
	{
		printf("constant value x:%d | y%d\n", x, y);
		if (x == 8 && y == 8)
			return (puzzle);
		if (x == 8)
		{
			x = 0;
			y++;
		}
		x++;
		count_duku(x, y, puzzle);
	}
	num = 1;
	while (num < 10 ) //&& puzzle[y][x] == 0
	{
		printf("checking value%d @ x:%d y:%d\n", num, x, y);
		r = ch_row(puzzle, y, num);
		c = ch_col(puzzle, x, num);
		sqr = ch_sqr(puzzle, x, y, num);
		
		if (sqr && c && r)
		{ 
		 	printf("winner %d | coords%d,%d\n", num, x,y);
		
			puzzle[y][x] = num;
			if (x == 8)
			{
				count_duku(0, y++, puzzle);
				x = 8;
				y--;
			}else
			{	
				count_duku(x++, y, puzzle);
				x = x - 1;
			}
			printf("after duku num: %d | x:%d | y:%d\n", num, x,y);

		}
		num++;
	}
	puzzle[y][x] = 0;
	printf("no success num:%d | x:%d | y:%d\n | puzz_val %d\n", num, x, y, puzzle[y][x]);
	test_print(puzzle);
	return (0);
}

int		ch_row(int **puzzle, int y, int num)
{
	int x;
	int good;

	
	x = 0;
	good = 1;

	while (x < 9)
	{
		//printf("%d-%d\n", num , puzzle[y][x]);
		if (num == puzzle[y][x])
			return (0);
		x++;
	}
		
	return (good);
}

int		ch_col(int **puzzle, int x, int num)
{
	int y;
	int good;

	
	y = 0;
	good = 1;
	while (y < 9)
	{
		if (num == puzzle[y][x])
			return (0);	
		y++;
	}		
	return (good);
}

int		ch_sqr(int **puzzle, int x, int y, int num)
{
	int i;
	int good;
	int ystopper;
	int xstopper;
	//printf("%d-%d\n", x , y);
	i = 0;
	good = 1;
	if (0 <= y && y <= 2)
	{
		y = 0;
		ystopper = 3;
	}
	else if (3 <= y && y <= 5)
	{
		y = 3;
		ystopper = 6;
	}	
	else
	{
		y = 6;
		ystopper = 9;
	}
	if (0 <= x && y <= 2)
	{
		x = 0;
		xstopper = 3;
	}
	else if (3 <= x && y <= 5)
	{
		x = 3;
		xstopper = 6;
	}
	else
	{
		x = 6;
		xstopper = 9;
	}
	//printf(" after: %d-%d\n", x , y);


	while (i < 9)
	{
		if (x == xstopper)
		{
			y++;
			x = x - 3;
		}
		if (y == ystopper)
			break;
		//printf("x: %d  y: %d", x, y);
		//printf("puzzle (%d , %d ) %d\n", y, x, puzzle[y][x]);
		if (num == puzzle[y][x])
			good = 0;
		x++;
		i++;
	}
	return (good);
}

int	main(int argc, char **argv)
{
	int **puzzle;
	int *row;
	int y;
	int x;

	y = 1;
	x = 0;
	if (argc != 10 )
	{
		write(1,"Error\n", 6);
		return(0);
	}
	puzzle = (int**)malloc(sizeof(int*) * 10);

	while (y < 10)
	{
		row = (int*)malloc(sizeof(int) * 10);
		x = 0;
		printf("%d - ", y);
	 	while (x < 9)
		{
			if (argv[y][x] == '.')
				row[x] = 0;
			else
			{
				row[x] = argv[y][x] - '0';
			}
			printf("%d ", row[x]);
			x++;
		}
		printf("\n");
		puzzle[y - 1] = row;
		y++;
	}

	count_duku(0, 0, puzzle);
	return (0);
}


//"9...7...." "2...9..53" ".6..124.." "84...1.9." "5.....8.." ".31..4..." "..37..68." ".9..5.741" "47......."










